# Necessary secrets:
#
# SLACK_BOT_TOKEN - necessary for sending build status to slack. Starts with `xoxb-`.
# DOCKERHUB_USERNAME - username of account that pushes docker image to dockerhub
# DOCKERHUB_TOKEN - token of user that pushed docker image to dockerhub
# GHCR_(PAT|USER) - necessary to push/pull docker images on ghcr.
#   The GHCR_(PAT|USER) is only temporary solution.
#   Once ghcr is on GA the GITHUB_TOKEN should be used instead of GHCR_PAT.
#
# This workflow also uses GITHUB_TOKEN secret. Github action workflow
# automatically creates GITHUB_TOKEN secret. There is no need to do that
# manually.

name: Push to docker repos

on:
  push:
    tags:
      - '[0-9]+.[0-9]+'  # matches versions tag like 1.0
      - docker-[a-zA-Z0-9]+

env:
  dockerhubOrga: x2iq
  slackNotificationsChannel: github_actions
  SLACK_BOT_TOKEN: ${{secrets.SLACK_BOT_TOKEN}}
  buildxVersion: v0.5.1

jobs:
  prepare:
    runs-on: ubuntu-20.04
    timeout-minutes: 1

    steps:
      - name: Notify slack start
        id: slack
        uses: voxmedia/github-action-slack-notify-build@v1.2.0
        with:
          channel: ${{env.slackNotificationsChannel}}
          status: 'running #${{github.run_number}}'
          color: warning

      - name: Docker labels
        id: docker-labels
        uses: crazy-max/ghaction-docker-meta@v2.3.0
        with:
          images: ignored  # It's required but not in use. Therefore the content is irrelevant.
          label-custom: org.opencontainers.image.vendor=2iQ Research GmbH

      - name: Determinate docker parameter
        id: docker-context
        uses: actions/github-script@v3.1.0
        with:
          script: |
            const [, , refName] = context.ref.split('/');

            const isRelease = !refName.startsWith('docker-');
            const tagName = refName.replace(/^docker-/, '');

            const dockerhubRepo = `${{env.dockerhubOrga}}/${context.payload.repository.name}`;
            const ghcrRepo = `ghcr.io/${{github.repository_owner}}/${context.payload.repository.name}`;

            core.setOutput('dockerhubImageName', `${dockerhubRepo}:${tagName}`)
            core.setOutput('ghcrImageName', `${ghcrRepo}:${tagName}`)

    outputs:
      slackMessageId: ${{steps.slack.outputs.message_id}}

      dockerhubImageName: ${{steps.docker-context.outputs.dockerhubImageName}}
      ghcrImageName: ${{steps.docker-context.outputs.ghcrImageName}}

      dockerImageLabels: ${{steps.docker-labels.outputs.labels}}

  build-amd64-image:
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    needs:
      - prepare

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.1.1
        with:
          version: ${{env.buildxVersion}}

      - name: Login to Docker Hub
        uses: docker/login-action@v1.8.0
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1.8.0
        with:
          registry: ghcr.io
          # username: ${{github.repository_owner}}  # TODO use once possible
          # password: ${{secrets.GITHUB_TOKEN}}  # TODO use once possible
          username: ${{secrets.GHCR_USER}}
          password: ${{secrets.GHCR_PAT}}

      - name: Build and push
        uses: docker/build-push-action@v2.2.2
        with:
          push: true
          labels: ${{needs.prepare.outputs.dockerImageLabels}}
          tags: |
            ${{needs.prepare.outputs.dockerhubImageName}}-amd64
            ${{needs.prepare.outputs.ghcrImageName}}-amd64

  build-arm64-image:
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    needs:
      - prepare

    steps:
      # TODO graal-native build is very slow on qemu
      #  use arm instance once available https://github.com/github/roadmap/issues/95
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.0.1
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.1.1
        with:
          version: ${{env.buildxVersion}}

      - name: Login to Docker Hub
        uses: docker/login-action@v1.8.0
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1.8.0
        with:
          registry: ghcr.io
          # username: ${{github.repository_owner}}  # TODO use once possible
          # password: ${{secrets.GITHUB_TOKEN}}  # TODO use once possible
          username: ${{secrets.GHCR_USER}}
          password: ${{secrets.GHCR_PAT}}

      - name: Build and push
        uses: docker/build-push-action@v2.2.2
        with:
          push: true
          platforms: arm64
          labels: ${{needs.prepare.outputs.dockerImageLabels}}
          tags: |
            ${{needs.prepare.outputs.dockerhubImageName}}-arm64
            ${{needs.prepare.outputs.ghcrImageName}}-arm64

  build-multiplatform-image:
    runs-on: ubuntu-20.04
    timeout-minutes: 2
    needs:
      - prepare
      - build-amd64-image
      - build-arm64-image

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.1.1
        with:
          version: ${{env.buildxVersion}}

      - name: Login to Docker Hub
        uses: docker/login-action@v1.8.0
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1.8.0
        with:
          registry: ghcr.io
          # username: ${{github.repository_owner}}  # TODO use once possible
          # password: ${{secrets.GITHUB_TOKEN}}  # TODO use once possible
          username: ${{secrets.GHCR_USER}}
          password: ${{secrets.GHCR_PAT}}

      - name: Create and push docker multi-platform image
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
          dockerhubImageName: ${{needs.prepare.outputs.dockerhubImageName}}
          ghcrImageName: ${{needs.prepare.outputs.ghcrImageName}}
        run: |
          docker manifest create ${dockerhubImageName} ${dockerhubImageName}-amd64 ${dockerhubImageName}-arm64
          docker manifest push ${dockerhubImageName}
          docker manifest create ${ghcrImageName} ${ghcrImageName}-amd64 ${ghcrImageName}-arm64
          docker manifest push ${ghcrImageName}

  send-finished-notification:
    runs-on: ubuntu-20.04
    if: always()
    timeout-minutes: 1
    needs:
      - prepare
      - build-multiplatform-image

    steps:
      - uses: technote-space/workflow-conclusion-action@v2.1.2

      - name: Notify slack success
        uses: voxmedia/github-action-slack-notify-build@v1.2.0
        if: env.WORKFLOW_CONCLUSION == 'success'
        with:
          message_id: ${{needs.prepare.outputs.slackMessageId}}
          channel: ${{env.slackNotificationsChannel}}
          status: '${{env.WORKFLOW_CONCLUSION}} #${{github.run_number}}'
          color: good

      - name: Notify slack fail
        uses: voxmedia/github-action-slack-notify-build@v1.2.0
        if: env.WORKFLOW_CONCLUSION != 'success'
        with:
          message_id: ${{needs.prepare.outputs.slackMessageId}}
          channel: ${{env.slackNotificationsChannel}}
          status: '${{env.WORKFLOW_CONCLUSION}} #${{github.run_number}}'
          color: danger
